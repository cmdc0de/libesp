#include "vec_math.h"

using namespace libesp;

template<> template<> vec<3, int>::vec(const vec<3, float> &v) :
		x(int(v.x + .5f)), y(int(v.y + .5f)), z(int(v.z + .5f)) {
}
template<> template<> vec<3, float>::vec(const vec<3, int> &v) :
		x(v.x), y(v.y), z(v.z) {
}
template<> template<> vec<2, int>::vec(const vec<2, float> &v) :
		x(int(v.x + .5f)), y(int(v.y + .5f)) {
}
template<> template<> vec<2, float>::vec(const vec<2, int> &v) :
		x(v.x), y(v.y) {
}

#define MAX_CIRCLE_ANGLE      256
#define HALF_MAX_CIRCLE_ANGLE (MAX_CIRCLE_ANGLE/2)
#define QUARTER_MAX_CIRCLE_ANGLE (MAX_CIRCLE_ANGLE/4)
#define MASK_MAX_CIRCLE_ANGLE (MAX_CIRCLE_ANGLE - 1)
#define PI 3.14159265358979323846f
static const float HALF_MAX_CIRCLE_ANGLE_DIV_PI = HALF_MAX_CIRCLE_ANGLE / PI;

static const float fast_cossin_table[] = {
		0.000000, 0.024541, 0.049068, 0.073565, 0.098017
		, 0.122411, 0.146730, 0.170962, 0.195090, 0.219101
		, 0.242980, 0.266713, 0.290285, 0.313682, 0.336890
		, 0.359895, 0.382683, 0.405241, 0.427555, 0.449611
		, 0.471397, 0.492898, 0.514103, 0.534998, 0.555570
		, 0.575808, 0.595699, 0.615232, 0.634393, 0.653173
		, 0.671559, 0.689541, 0.707107, 0.724247, 0.740951
		, 0.757209, 0.773010, 0.788346, 0.803208, 0.817585
		, 0.831470, 0.844854, 0.857729, 0.870087, 0.881921
		, 0.893224, 0.903989, 0.914210, 0.923880, 0.932993
		, 0.941544, 0.949528, 0.956940, 0.963776, 0.970031
		, 0.975702, 0.980785, 0.985278, 0.989177, 0.992480
		, 0.995185, 0.997290, 0.998795, 0.999699, 1.000000
		, 0.999699, 0.998795, 0.997290, 0.995185, 0.992480
		, 0.989177, 0.985278, 0.980785, 0.975702, 0.970031
		, 0.963776, 0.956940, 0.949528, 0.941544, 0.932993
		, 0.923880, 0.914210, 0.903989, 0.893224, 0.881921
		, 0.870087, 0.857729, 0.844854, 0.831470, 0.817585
		, 0.803208, 0.788346, 0.773010, 0.757209, 0.740951
		, 0.724247, 0.707107, 0.689541, 0.671559, 0.653173
		, 0.634393, 0.615232, 0.595699, 0.575808, 0.555570
		, 0.534998, 0.514103, 0.492898, 0.471397, 0.449611
		, 0.427555, 0.405241, 0.382683, 0.359895, 0.336890
		, 0.313682, 0.290285, 0.266713, 0.242980, 0.219101
		, 0.195090, 0.170962, 0.146730, 0.122411, 0.098017
		, 0.073564, 0.049068, 0.024541, -0.000000, -0.024541
		, -0.049068, -0.073565, -0.098017, -0.122411, -0.146731
		, -0.170962, -0.195090, -0.219101, -0.242980, -0.266713
		, -0.290285, -0.313682, -0.336890, -0.359895, -0.382684
		, -0.405241, -0.427555, -0.449611, -0.471397, -0.492898
		, -0.514103, -0.534998, -0.555570, -0.575808, -0.595699
		, -0.615232, -0.634393, -0.653173, -0.671559, -0.689541
		, -0.707107, -0.724247, -0.740951, -0.757209, -0.773011
		, -0.788346, -0.803208, -0.817585, -0.831470, -0.844854
		, -0.857729, -0.870087, -0.881921, -0.893224, -0.903989
		, -0.914210, -0.923880, -0.932993, -0.941544, -0.949528
		, -0.956940, -0.963776, -0.970031, -0.975702, -0.980785
		, -0.985278, -0.989177, -0.992480, -0.995185, -0.997290
		, -0.998795, -0.999699, -1.000000, -0.999699, -0.998795
		, -0.997290, -0.995185, -0.992480, -0.989177, -0.985278
		, -0.980785, -0.975702, -0.970031, -0.963776, -0.956940
		, -0.949528, -0.941544, -0.932993, -0.923880, -0.914210
		, -0.903989, -0.893224, -0.881921, -0.870087, -0.857729
		, -0.844853, -0.831470, -0.817585, -0.803207, -0.788346
		, -0.773010, -0.757209, -0.740951, -0.724247, -0.707107
		, -0.689540, -0.671559, -0.653173, -0.634393, -0.615231
		, -0.595699, -0.575808, -0.555570, -0.534997, -0.514103
		, -0.492898, -0.471397, -0.449611, -0.427555, -0.405241
		, -0.382683, -0.359895, -0.336890, -0.313682, -0.290285
		, -0.266713, -0.242980, -0.219101, -0.195090, -0.170962
		, -0.146730, -0.122411, -0.098017, -0.073564, -0.049068
		, -0.024541
};

float libesp::fastcos(float n) {
	float f = n * HALF_MAX_CIRCLE_ANGLE_DIV_PI; // HALF_MAX_CIRCLE_ANGLE / PI;
	int i = int(f);
	if (i < 0) {
		return fast_cossin_table[((-i) + QUARTER_MAX_CIRCLE_ANGLE) & MASK_MAX_CIRCLE_ANGLE];
	} else {
		return fast_cossin_table[(i + QUARTER_MAX_CIRCLE_ANGLE) & MASK_MAX_CIRCLE_ANGLE];
	}

	assert(0);
}

float libesp::fastsin(float n) {
	float f = n * HALF_MAX_CIRCLE_ANGLE / PI;
	int i = int(f);
	if (i < 0) {
		return fast_cossin_table[(-((-i) & MASK_MAX_CIRCLE_ANGLE)) + MAX_CIRCLE_ANGLE];
	} else {
		return fast_cossin_table[i & MASK_MAX_CIRCLE_ANGLE];
	}

	assert(0);
}
